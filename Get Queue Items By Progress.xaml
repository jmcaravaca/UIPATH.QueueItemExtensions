<Activity mc:Ignorable="sap sap2010" x:Class="Get_All_Queue_Items" this:Get_All_Queue_Items.TimeoutMS="30000" this:Get_All_Queue_Items.Continue_OnError="False" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:mva="clr-namespace:Microsoft.VisualBasic.Activities;assembly=System.Activities" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib" xmlns:this="clr-namespace:" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="TimeoutMS" Type="InArgument(x:Int32)" />
    <x:Property Name="QueueName" Type="InArgument(x:String)" />
    <x:Property Name="FolderPath" Type="InArgument(x:String)" />
    <x:Property Name="Duration" Type="InArgument(s:Nullable(x:Int32))" />
    <x:Property Name="Priority" Type="InArgument(x:String)" />
    <x:Property Name="QueueItemStates" Type="InArgument(s:String[])" />
    <x:Property Name="QueueItems" Type="OutArgument(scg:List(ui:QueueItem))" />
    <x:Property Name="FilterTo" Type="InArgument(s:Nullable(s:DateTime))" />
    <x:Property Name="FilterFrom" Type="InArgument(s:Nullable(s:DateTime))" />
    <x:Property Name="FilterStrategy" Type="InArgument(x:String)" />
    <x:Property Name="Reference" Type="InArgument(x:String)" />
    <x:Property Name="FilterTop" Type="InArgument(x:Int32)" />
    <x:Property Name="Continue_OnError" Type="InArgument(x:Boolean)" />
  </x:Members>
  <mva:VisualBasic.Settings>
    <x:Null />
  </mva:VisualBasic.Settings>
  <sap:VirtualizedContainerService.HintSize>1089,1399</sap:VirtualizedContainerService.HintSize>
  <sap2010:WorkflowViewState.IdRef>Get_All_Queue_Items_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <scg:List x:TypeArguments="x:String" Capacity="27">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>System.Activities.DynamicUpdate</x:String>
      <x:String>System.Runtime.Serialization</x:String>
      <x:String>System.Reflection</x:String>
      <x:String>System.Runtime.InteropServices</x:String>
      <x:String>UiPath.Core.Activities.Orchestrator</x:String>
    </scg:List>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <scg:List x:TypeArguments="AssemblyReference" Capacity="26">
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>PresentationCore</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization</AssemblyReference>
      <AssemblyReference>System.Reflection.Metadata</AssemblyReference>
      <AssemblyReference>System.Memory</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>Microsoft.Bcl.AsyncInterfaces</AssemblyReference>
      <AssemblyReference>System.ValueTuple</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Composition</AssemblyReference>
      <AssemblyReference>UiPath.Excel</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities.Design</AssemblyReference>
    </scg:List>
  </TextExpression.ReferencesForImplementation>
  <Sequence sap2010:Annotation.AnnotationText="TODO&#xD;&#xA;Bypasses the 100 limit when using a &quot;Get Queue Items&quot; activity by doing it until no more results are available&#xA;ARGUMENTS:&#xA;Same as &quot;Get Queue Items&quot; Activity, with QueueItemStates being an array of the states." DisplayName="Get_All_Queue_Items" sap:VirtualizedContainerService.HintSize="616,1334" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <Sequence.Variables>
      <Variable x:TypeArguments="x:Int32" Default="0" Name="index" />
    </Sequence.Variables>
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <Assign DisplayName="Initiialize List" sap:VirtualizedContainerService.HintSize="574,60" sap2010:WorkflowViewState.IdRef="Assign_2">
      <Assign.To>
        <OutArgument x:TypeArguments="scg:List(ui:QueueItem)">[QueueItems]</OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="scg:List(ui:QueueItem)">[new List(Of QueueItem)]</InArgument>
      </Assign.Value>
    </Assign>
    <ui:ForEach x:TypeArguments="x:String" CurrentIndex="{x:Null}" DisplayName="For Each" sap:VirtualizedContainerService.HintSize="574,1070" sap2010:WorkflowViewState.IdRef="ForEach`1_1" Values="[QueueItemStates]">
      <ui:ForEach.Body>
        <ActivityAction x:TypeArguments="x:String">
          <ActivityAction.Argument>
            <DelegateInArgument x:TypeArguments="x:String" Name="state" />
          </ActivityAction.Argument>
          <Sequence DisplayName="Body" sap:VirtualizedContainerService.HintSize="538,946" sap2010:WorkflowViewState.IdRef="Sequence_3">
            <Sequence.Variables>
              <Variable x:TypeArguments="scg:List(ui:QueueItem)" Name="qItemsTemp" />
            </Sequence.Variables>
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <Switch x:TypeArguments="x:String" DisplayName="Switch" Expression="[state]" sap:VirtualizedContainerService.HintSize="496,270" sap2010:WorkflowViewState.IdRef="Switch`1_1">
              <Switch.Default>
                <Sequence sap:VirtualizedContainerService.HintSize="376,335" sap2010:WorkflowViewState.IdRef="Sequence_6">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="334,91" sap2010:WorkflowViewState.IdRef="LogMessage_2" Level="Warn" Message="[&quot;Item State was not recognized - Defaulting to All&quot;]" />
                  <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke __GetQueueItems_InProgress workflow" sap:VirtualizedContainerService.HintSize="334,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_8" UnSafe="False" WorkflowFileName="__GetQueueItems_All.xaml">
                    <ui:InvokeWorkflowFile.Arguments>
                      <InArgument x:TypeArguments="x:Int32" x:Key="TimeoutMS">[TimeoutMS]</InArgument>
                      <InArgument x:TypeArguments="x:String" x:Key="QueueName">[QueueName]</InArgument>
                      <InArgument x:TypeArguments="x:String" x:Key="FolderPath">[FolderPath]</InArgument>
                      <InArgument x:TypeArguments="s:Nullable(x:Int32)" x:Key="Duration">[Duration]</InArgument>
                      <InArgument x:TypeArguments="x:String" x:Key="Priority">[Priority]</InArgument>
                      <OutArgument x:TypeArguments="scg:List(ui:QueueItem)" x:Key="QueueItems">[qITemsTemp]</OutArgument>
                      <InArgument x:TypeArguments="s:Nullable(s:DateTime)" x:Key="FilterTo">[FilterTo]</InArgument>
                      <InArgument x:TypeArguments="s:Nullable(s:DateTime)" x:Key="FilterFrom">[FilterFrom]</InArgument>
                      <InArgument x:TypeArguments="x:String" x:Key="FilterStrategy">[FilterStrategy]</InArgument>
                      <InArgument x:TypeArguments="x:String" x:Key="Reference">[Reference]</InArgument>
                      <InArgument x:TypeArguments="x:Int32" x:Key="FilterTop">[FilterTop]</InArgument>
                      <InArgument x:TypeArguments="x:Boolean" x:Key="Continue_OnError">[Continue_OnError]</InArgument>
                    </ui:InvokeWorkflowFile.Arguments>
                  </ui:InvokeWorkflowFile>
                </Sequence>
              </Switch.Default>
              <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" x:Key="InProgress" DisplayName="Invoke __GetQueueItems_InProgress workflow" sap:VirtualizedContainerService.HintSize="334,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_1" UnSafe="False" WorkflowFileName="__GetQueueItems_InProgress.xaml">
                <ui:InvokeWorkflowFile.Arguments>
                  <InArgument x:TypeArguments="x:Int32" x:Key="TimeoutMS">[TimeoutMS]</InArgument>
                  <InArgument x:TypeArguments="x:String" x:Key="QueueName">[QueueName]</InArgument>
                  <InArgument x:TypeArguments="x:String" x:Key="FolderPath">[FolderPath]</InArgument>
                  <InArgument x:TypeArguments="s:Nullable(x:Int32)" x:Key="Duration">[Duration]</InArgument>
                  <InArgument x:TypeArguments="x:String" x:Key="Priority">[Priority]</InArgument>
                  <OutArgument x:TypeArguments="scg:List(ui:QueueItem)" x:Key="QueueItems">[qITemsTemp]</OutArgument>
                  <InArgument x:TypeArguments="s:Nullable(s:DateTime)" x:Key="FilterTo">[FilterTo]</InArgument>
                  <InArgument x:TypeArguments="s:Nullable(s:DateTime)" x:Key="FilterFrom">[FilterFrom]</InArgument>
                  <InArgument x:TypeArguments="x:String" x:Key="FilterStrategy">[FilterStrategy]</InArgument>
                  <InArgument x:TypeArguments="x:String" x:Key="Reference">[Reference]</InArgument>
                  <InArgument x:TypeArguments="x:Int32" x:Key="FilterTop">[FilterTop]</InArgument>
                  <InArgument x:TypeArguments="x:Boolean" x:Key="Continue_OnError">[Continue_OnError]</InArgument>
                </ui:InvokeWorkflowFile.Arguments>
              </ui:InvokeWorkflowFile>
              <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" x:Key="Failed" DisplayName="Invoke __GetQueueItems_Failed workflow" sap:VirtualizedContainerService.HintSize="334,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_2" UnSafe="False" WorkflowFileName="__GetQueueItems_Failed.xaml">
                <ui:InvokeWorkflowFile.Arguments>
                  <InArgument x:TypeArguments="x:Int32" x:Key="TimeoutMS">[TimeoutMS]</InArgument>
                  <InArgument x:TypeArguments="x:String" x:Key="QueueName">[QueueName]</InArgument>
                  <InArgument x:TypeArguments="x:String" x:Key="FolderPath">[FolderPath]</InArgument>
                  <InArgument x:TypeArguments="s:Nullable(x:Int32)" x:Key="Duration">[Duration]</InArgument>
                  <InArgument x:TypeArguments="x:String" x:Key="Priority">[Priority]</InArgument>
                  <OutArgument x:TypeArguments="scg:List(ui:QueueItem)" x:Key="QueueItems">[qITemsTemp]</OutArgument>
                  <InArgument x:TypeArguments="s:Nullable(s:DateTime)" x:Key="FilterTo">[FilterTo]</InArgument>
                  <InArgument x:TypeArguments="s:Nullable(s:DateTime)" x:Key="FilterFrom">[FilterFrom]</InArgument>
                  <InArgument x:TypeArguments="x:String" x:Key="FilterStrategy">[FilterStrategy]</InArgument>
                  <InArgument x:TypeArguments="x:String" x:Key="Reference">[Reference]</InArgument>
                  <InArgument x:TypeArguments="x:Int32" x:Key="FilterTop">[FilterTop]</InArgument>
                  <InArgument x:TypeArguments="x:Boolean" x:Key="Continue_OnError">[Continue_OnError]</InArgument>
                </ui:InvokeWorkflowFile.Arguments>
              </ui:InvokeWorkflowFile>
              <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" x:Key="Successful" DisplayName="Invoke __GetQueueItems_Succesful workflow" sap:VirtualizedContainerService.HintSize="334,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_3" UnSafe="False" WorkflowFileName="__GetQueueItems_Successful.xaml">
                <ui:InvokeWorkflowFile.Arguments>
                  <InArgument x:TypeArguments="x:Int32" x:Key="TimeoutMS">[TimeoutMS]</InArgument>
                  <InArgument x:TypeArguments="x:String" x:Key="QueueName">[QueueName]</InArgument>
                  <InArgument x:TypeArguments="x:String" x:Key="FolderPath">[FolderPath]</InArgument>
                  <InArgument x:TypeArguments="s:Nullable(x:Int32)" x:Key="Duration">[Duration]</InArgument>
                  <InArgument x:TypeArguments="x:String" x:Key="Priority">[Priority]</InArgument>
                  <OutArgument x:TypeArguments="scg:List(ui:QueueItem)" x:Key="QueueItems">[qITemsTemp]</OutArgument>
                  <InArgument x:TypeArguments="s:Nullable(s:DateTime)" x:Key="FilterTo">[FilterTo]</InArgument>
                  <InArgument x:TypeArguments="s:Nullable(s:DateTime)" x:Key="FilterFrom">[FilterFrom]</InArgument>
                  <InArgument x:TypeArguments="x:String" x:Key="FilterStrategy">[FilterStrategy]</InArgument>
                  <InArgument x:TypeArguments="x:String" x:Key="Reference">[Reference]</InArgument>
                  <InArgument x:TypeArguments="x:Int32" x:Key="FilterTop">[FilterTop]</InArgument>
                  <InArgument x:TypeArguments="x:Boolean" x:Key="Continue_OnError">[Continue_OnError]</InArgument>
                </ui:InvokeWorkflowFile.Arguments>
              </ui:InvokeWorkflowFile>
              <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" x:Key="Abandoned" DisplayName="Invoke __GetQueueItems_Abandoned Workflow" sap:VirtualizedContainerService.HintSize="334,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_4" UnSafe="False" WorkflowFileName="__GetQueueItems_Abandoned.xaml">
                <ui:InvokeWorkflowFile.Arguments>
                  <InArgument x:TypeArguments="x:Int32" x:Key="TimeoutMS">[TimeoutMS]</InArgument>
                  <InArgument x:TypeArguments="x:String" x:Key="QueueName">[QueueName]</InArgument>
                  <InArgument x:TypeArguments="x:String" x:Key="FolderPath">[FolderPath]</InArgument>
                  <InArgument x:TypeArguments="s:Nullable(x:Int32)" x:Key="Duration">[Duration]</InArgument>
                  <InArgument x:TypeArguments="x:String" x:Key="Priority">[Priority]</InArgument>
                  <OutArgument x:TypeArguments="scg:List(ui:QueueItem)" x:Key="QueueItems">[qITemsTemp]</OutArgument>
                  <InArgument x:TypeArguments="s:Nullable(s:DateTime)" x:Key="FilterTo">[FilterTo]</InArgument>
                  <InArgument x:TypeArguments="s:Nullable(s:DateTime)" x:Key="FilterFrom">[FilterFrom]</InArgument>
                  <InArgument x:TypeArguments="x:String" x:Key="FilterStrategy">[FilterStrategy]</InArgument>
                  <InArgument x:TypeArguments="x:String" x:Key="Reference">[Reference]</InArgument>
                  <InArgument x:TypeArguments="x:Int32" x:Key="FilterTop">[FilterTop]</InArgument>
                  <InArgument x:TypeArguments="x:Boolean" x:Key="Continue_OnError">[Continue_OnError]</InArgument>
                </ui:InvokeWorkflowFile.Arguments>
              </ui:InvokeWorkflowFile>
              <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" x:Key="Retried" DisplayName="Invoke __GetQueueItems_Retried Workflow" sap:VirtualizedContainerService.HintSize="334,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_5" UnSafe="False" WorkflowFileName="__GetQueueItems_Retried.xaml">
                <ui:InvokeWorkflowFile.Arguments>
                  <InArgument x:TypeArguments="x:Int32" x:Key="TimeoutMS">[TimeoutMS]</InArgument>
                  <InArgument x:TypeArguments="x:String" x:Key="QueueName">[QueueName]</InArgument>
                  <InArgument x:TypeArguments="x:String" x:Key="FolderPath">[FolderPath]</InArgument>
                  <InArgument x:TypeArguments="s:Nullable(x:Int32)" x:Key="Duration">[Duration]</InArgument>
                  <InArgument x:TypeArguments="x:String" x:Key="Priority">[Priority]</InArgument>
                  <OutArgument x:TypeArguments="scg:List(ui:QueueItem)" x:Key="QueueItems">[qITemsTemp]</OutArgument>
                  <InArgument x:TypeArguments="s:Nullable(s:DateTime)" x:Key="FilterTo">[FilterTo]</InArgument>
                  <InArgument x:TypeArguments="s:Nullable(s:DateTime)" x:Key="FilterFrom">[FilterFrom]</InArgument>
                  <InArgument x:TypeArguments="x:String" x:Key="FilterStrategy">[FilterStrategy]</InArgument>
                  <InArgument x:TypeArguments="x:String" x:Key="Reference">[Reference]</InArgument>
                  <InArgument x:TypeArguments="x:Int32" x:Key="FilterTop">[FilterTop]</InArgument>
                  <InArgument x:TypeArguments="x:Boolean" x:Key="Continue_OnError">[Continue_OnError]</InArgument>
                </ui:InvokeWorkflowFile.Arguments>
              </ui:InvokeWorkflowFile>
              <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" x:Key="Deleted" DisplayName="Invoke __GetQueueItems_Deleted Workflow" sap:VirtualizedContainerService.HintSize="334,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_6" UnSafe="False" WorkflowFileName="__GetQueueItems_Deleted.xaml">
                <ui:InvokeWorkflowFile.Arguments>
                  <InArgument x:TypeArguments="x:Int32" x:Key="TimeoutMS">[TimeoutMS]</InArgument>
                  <InArgument x:TypeArguments="x:String" x:Key="QueueName">[QueueName]</InArgument>
                  <InArgument x:TypeArguments="x:String" x:Key="FolderPath">[FolderPath]</InArgument>
                  <InArgument x:TypeArguments="s:Nullable(x:Int32)" x:Key="Duration">[Duration]</InArgument>
                  <InArgument x:TypeArguments="x:String" x:Key="Priority">[Priority]</InArgument>
                  <OutArgument x:TypeArguments="scg:List(ui:QueueItem)" x:Key="QueueItems">[qITemsTemp]</OutArgument>
                  <InArgument x:TypeArguments="s:Nullable(s:DateTime)" x:Key="FilterTo">[FilterTo]</InArgument>
                  <InArgument x:TypeArguments="s:Nullable(s:DateTime)" x:Key="FilterFrom">[FilterFrom]</InArgument>
                  <InArgument x:TypeArguments="x:String" x:Key="FilterStrategy">[FilterStrategy]</InArgument>
                  <InArgument x:TypeArguments="x:String" x:Key="Reference">[Reference]</InArgument>
                  <InArgument x:TypeArguments="x:Int32" x:Key="FilterTop">[FilterTop]</InArgument>
                  <InArgument x:TypeArguments="x:Boolean" x:Key="Continue_OnError">[Continue_OnError]</InArgument>
                </ui:InvokeWorkflowFile.Arguments>
              </ui:InvokeWorkflowFile>
              <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" x:Key="New" DisplayName="Invoke __GetQueueItems_New Workflow" sap:VirtualizedContainerService.HintSize="334,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_7" UnSafe="False" WorkflowFileName="__GetQueueItems_New.xaml">
                <ui:InvokeWorkflowFile.Arguments>
                  <InArgument x:TypeArguments="x:Int32" x:Key="TimeoutMS">[TimeoutMS]</InArgument>
                  <InArgument x:TypeArguments="x:String" x:Key="QueueName">[QueueName]</InArgument>
                  <InArgument x:TypeArguments="x:String" x:Key="FolderPath">[FolderPath]</InArgument>
                  <InArgument x:TypeArguments="s:Nullable(x:Int32)" x:Key="Duration">[Duration]</InArgument>
                  <InArgument x:TypeArguments="x:String" x:Key="Priority">[Priority]</InArgument>
                  <OutArgument x:TypeArguments="scg:List(ui:QueueItem)" x:Key="QueueItems">[qITemsTemp]</OutArgument>
                  <InArgument x:TypeArguments="s:Nullable(s:DateTime)" x:Key="FilterTo">[FilterTo]</InArgument>
                  <InArgument x:TypeArguments="s:Nullable(s:DateTime)" x:Key="FilterFrom">[FilterFrom]</InArgument>
                  <InArgument x:TypeArguments="x:String" x:Key="FilterStrategy">[FilterStrategy]</InArgument>
                  <InArgument x:TypeArguments="x:String" x:Key="Reference">[Reference]</InArgument>
                  <InArgument x:TypeArguments="x:Int32" x:Key="FilterTop">[FilterTop]</InArgument>
                  <InArgument x:TypeArguments="x:Boolean" x:Key="Continue_OnError">[Continue_OnError]</InArgument>
                </ui:InvokeWorkflowFile.Arguments>
              </ui:InvokeWorkflowFile>
            </Switch>
            <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="496,91" sap2010:WorkflowViewState.IdRef="LogMessage_1" Level="Trace" Message="[qItemsTemp.Count]" />
            <If Condition="[qItemsTemp.Count &gt; 0]" DisplayName="If Any Items Found" sap:VirtualizedContainerService.HintSize="496,413" sap2010:WorkflowViewState.IdRef="If_1">
              <If.Then>
                <Sequence sap:VirtualizedContainerService.HintSize="280,226" sap2010:WorkflowViewState.IdRef="Sequence_4">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <InvokeMethod DisplayName="Concatenate to output" sap:VirtualizedContainerService.HintSize="238,134" sap2010:WorkflowViewState.IdRef="InvokeMethod_3" MethodName="AddRange">
                    <InvokeMethod.TargetObject>
                      <InArgument x:TypeArguments="scg:List(ui:QueueItem)">[QueueItems]</InArgument>
                    </InvokeMethod.TargetObject>
                    <InArgument x:TypeArguments="scg:IEnumerable(ui:QueueItem)">[qItemsTemp]</InArgument>
                  </InvokeMethod>
                </Sequence>
              </If.Then>
              <If.Else>
                <Sequence sap2010:WorkflowViewState.IdRef="Sequence_5">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                </Sequence>
              </If.Else>
            </If>
          </Sequence>
        </ActivityAction>
      </ui:ForEach.Body>
    </ui:ForEach>
  </Sequence>
</Activity>